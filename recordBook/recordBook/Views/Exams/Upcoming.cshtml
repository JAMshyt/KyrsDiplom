@using System.Security.Claims;
@using recordBook.Models
@using recordBook.Models.ViewModels

@model ExamsViewModel
@{
	@if (User.IsInRole("Student"))
	{
		ViewData["Title"] = "Ваши предстоящие экзамены, " + User.FindFirst(ClaimTypes.Surname)?.Value + " " + User.FindFirst(ClaimTypes.Name)?.Value;
	}
	else if (User.IsInRole("Adm") || User.IsInRole("Curator"))
	{
		ViewData["Title"] = "Предстоящие экзамены группы " + Model.selectedGroup.Name_group;
	}
}

<h1>@ViewData["Title"]</h1>


@if (User.IsInRole("Adm"))
{
	<form asp-controller="Exams" asp-action="Upcoming">
		<select name="selectedGroup" required onchange="this.form.submit()" style="width:120px; height:40px; text-align:center">
			@foreach (var groups in Model.Groups)
			{
				if (groups.ID_Group == Model.selectedGroup.ID_Group)
				{
					<option value="@groups.ID_Group" selected>@groups.Name_group</option>
				}
				else
				{
					<option value="@groups.ID_Group">@groups.Name_group</option>
				}
			}
		</select>


		<select name="selectedSubject" required onchange="this.form.submit()" style="width:200px; height:40px; text-align:center">
			@foreach (var subj in Model.Subjects)
			{
				if (Model.Group_Subjects.Where(y => y.ID_Group == Model.selectedGroup.ID_Group).Select(z => z.ID_Subject).Contains(subj.ID_Subject))
				{
					if (subj.ID_Subject == Model.selectedSubject.ID_Subject)
					{
						<option value="@subj.ID_Subject" selected>@subj.Name_subject</option>
					}
					else
					{
						<option value="@subj.ID_Subject">@subj.Name_subject</option>
					}
				}
			}
		</select>

	</form>


	<table class="table" id="myTable" style="width:95%">

		<thead>
			<tr>
				<th id="tableLabel">
					<h6 style="margin-bottom : 0px; text-align:justify;">Студент</h6>
				</th>
				<th id="tableLabel">
					<h6 style="margin-bottom : 0px; text-align:justify; display:inline">Оценка</h6>
					<button type="button" id="ChangeGradeBtn" class="btn btn-warning">Изменить</button>
				</th>
				<th id="tableLabel">
					<h6 style="margin-bottom : 0px; text-align:justify">Тип работы</h6>
				</th>
				<th id="tableLabel">
					<h6 style="margin-bottom : 0px; margin-left : 20%; text-align:justify; display:inline">Дата сдачи</h6>
					<button type="button" id="ChangeDateBtn" class="btn btn-warning">Изменить</button>

				</th>
			</tr>
		</thead>
		<tbody>

			@foreach (var r in Model.Academic_Performances
					.Where(i => i.ID_Subject == Model.selectedSubject.ID_Subject)
					.Where(a => a.Grade == "Нет оценки")
					.Where(q => q.Date > DateTime.Now & q.ID_Kind_of_work != 4))
			{
				bool groupCheck = Model.Students.Where(q => q.ID_Group == Model.selectedGroup.ID_Group).Any(q => q.ID_Student == r.ID_Student);

				if (groupCheck)
				{
					var student = Model.Students.FirstOrDefault(q => q.ID_Student == r.ID_Student);
					<tr id="columnGrade">
						<td style="text-align:justify; font-weight: bold">
							<p id="label_s">@student.Surname  @student.Name  @student.Patronymic</p>
						</td>

						<td id="cellGrade" style="text-align:justify;  padding-right:10%; font-weight: bold ">
							<p class="labelsGrade">@r.Grade</p>
							<select class="selectGrades" onchange="GradeIsChanged(@r.ID_Academic_performance,event)" style="max-width:200px; width:90%; height:30px; text-align:justify">
								<option value="Отлично">Отлично</option>
								<option value="Хорошо">Хорошо</option>
								<option value="Удовлетворительно">Удовлетворительно</option>
								<option value="Неудовлетворительно">Неудовлетворительно</option>
								<option value="Нет оценки" selected>Нет оценки</option>
							</select>
						</td>

						<td style="text-align:justify;   max-width: 100px; word-wrap: break-word; font-weight: bold ">
							<p id="label_s"> @Model.Kind_of_works.Where(z => z.ID_Kind_of_work == @r.ID_Kind_of_work).Select(z => z.Title_of_kind).FirstOrDefault() </p>
						</td>
						<td style="text-align:center;  font-weight: bold ">
							<p id="label_s"> @r.Date?.ToString("dd MMMM yyyy") </p>
							<input type="date" class="selectDates" onchange="DateIsChanged(@r.ID_Academic_performance,event)" style="max-width:150px; width:80%; height:30px; text-align:center">

						</td>
					</tr>
				}
			}

		</tbody>
	</table>
}
else if (User.IsInRole("Student"))
{
	<table class="table" id="myTable" style="width:95%">

		<thead>
			<tr>
				<th id="tableLabel">
					<h6 style="margin-bottom : 0px; text-align:justify;">Предмет</h6>
				</th>
				<th id="tableLabel">
					<h6 style="margin-bottom : 0px; text-align:justify">Тип работы</h6>
				</th>
				<th id="tableLabel">
					<h6 style="margin-bottom : 0px; text-align:justify">Дата сдачи</h6>
				</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var subj in Model.Group_Subjects)
			{
				@foreach (var r in Model.Academic_Performances
						.Where(g => g.ID_Subject == subj.ID_Subject)
						.Where(a => a.Grade == "Нет оценки")
						.Where(q => q.Date > DateTime.Now & q.ID_Kind_of_work != 4))
				{
					var subjName = Model.Subjects.Where(q => q.ID_Subject == r.ID_Subject).Select(q => q.Name_subject).FirstOrDefault();
					<tr id="columnGrade">
						<td style="text-align:justify; font-weight: bold">
							<p id="label_s">@subjName.ToString()</p>
						</td>

						<td style="text-align:justify;  font-weight: bold ">
							<p id="label_s"> @Model.Kind_of_works.Where(z => z.ID_Kind_of_work == @r.ID_Kind_of_work).Select(z => z.Title_of_kind).FirstOrDefault() </p>
						</td>
						<td style="text-align:justify;  font-weight: bold ">
							<p id="label_s"> @r.Date?.ToString("dd MMMM yyyy") </p>
						</td>
					</tr>
				}
			}
		</tbody>
	</table>
}
else if (User.IsInRole("Curator"))
{
	<form asp-controller="Exams" asp-action="Upcoming">
		<select name="selectedGroup" required onchange="this.form.submit()" style="width:120px; height:40px; text-align:center">
			@foreach (var groups in Model.Groups)
			{
				if (groups.ID_Group == Model.selectedGroup.ID_Group)
				{
					<option value="@groups.ID_Group" selected>@groups.Name_group</option>
				}
				else
				{
					<option value="@groups.ID_Group">@groups.Name_group</option>
				}
			}
		</select>


		<select name="selectedSubject" required onchange="this.form.submit()" style="width:200px; height:40px; text-align:center">
			@foreach (var subj2 in Model.Subjects)
			{
				if (Model.Group_Subjects.Where(y => y.ID_Group == Model.selectedGroup.ID_Group).Select(z => z.ID_Subject).Contains(subj2.ID_Subject))
				{
					if (subj2.ID_Subject == Model.selectedSubject.ID_Subject)
					{
						<option value="@subj2.ID_Subject" selected>@subj2.Name_subject</option>
					}
					else
					{
						<option value="@subj2.ID_Subject">@subj2.Name_subject</option>
					}
				}
			}
		</select>

	</form>


	<table class="table" id="CuratorTable" style="width:95%">

		<thead>
			<tr>
				<th id="tableLabel">
					<h6 style="margin-bottom : 0px; text-align:justify;">Студент</h6>
				</th>
				<th id="tableLabel">
					<h6 style="margin-bottom : 0px; text-align:justify">Тип работы</h6>
				</th>
				<th id="tableLabel">
					<h6 style="margin-bottom : 0px; text-align:justify">Дата сдачи</h6>
				</th>
			</tr>
		</thead>
		<tbody>

			@foreach (var r in Model.Academic_Performances
					.Where(i => i.ID_Subject == Model.selectedSubject.ID_Subject)
					.Where(a => a.Grade == "Нет оценки")
					.Where(q => q.Date > DateTime.Now & q.ID_Kind_of_work != 4))
			{
				bool groupCheck = Model.Students.Where(q => q.ID_Group == Model.selectedGroup.ID_Group).Any(q => q.ID_Student == r.ID_Student);

				if (groupCheck)
				{
					var student = Model.Students.FirstOrDefault(q => q.ID_Student == r.ID_Student);
					<tr id="columnGrade">
						<td style="text-align:justify; font-weight: bold">
							<p id="label_s">@student.Surname  @student.Name  @student.Patronymic</p>
						</td>
						<td style="text-align:justify;  font-weight: bold ">
							<p id="label_s"> @Model.Kind_of_works.Where(z => z.ID_Kind_of_work == @r.ID_Kind_of_work).Select(z => z.Title_of_kind).FirstOrDefault() </p>
						</td>
						<td style="text-align:justify;  font-weight: bold ">
							<p id="label_s"> @r.Date?.ToString("dd MMMM yyyy") </p>
						</td>
					</tr>
				}
			}

		</tbody>
	</table>
	string group = Model.selectedGroup.Name_group;
	string subj = Model.selectedSubject.Name_subject;

	<button id="exportButton" class="btn btn-info" onclick="exportToExcel('@group','@subj')">Сохранить в Excel</button>
}


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.0/xlsx.full.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/exceljs/dist/exceljs.min.js"></script>

<script type='text/javascript'>

	$(document).ready(function () {
		$('.selectGrades').hide();
		$('.selectDates').hide();
	});

	async function exportToExcel(selectedGroup, selectedSubject) {
		const ExcelJS = window.ExcelJS;

		var workbook = new ExcelJS.Workbook();
		var worksheet = workbook.addWorksheet('Sheet1');

		// Находим таблицу на сайте
		var table = document.getElementById('CuratorTable');

		// Получаем данные из HTML-таблицы
		var data = [];
		for (var i = 0; i < table.rows.length; i++) {
			var rowData = [];
			for (var j = 0; j < table.rows[i].cells.length; j++) {
				rowData.push(table.rows[i].cells[j].innerText.trim());
			}
			data.push(rowData);
		}

		// Заполняем ячейки в файле Excel данными из таблицы
		data.forEach((row, rowIndex) => {
			row.forEach((cell, cellIndex) => {
				if (rowIndex === 0) {
					// Устанавливаем стиль для шапки таблицы (первой строки) с содержащимся текстом
					const excelCell = worksheet.getCell(String.fromCharCode(65 + cellIndex) + (rowIndex + 1));
					excelCell.value = cell;
					if (cell.trim() !== "") {
						excelCell.fill = {
							type: 'pattern',
							pattern: 'solid',
							fgColor: { argb: 'FFC0C0C0' } // Серый цвет фона
						};
						excelCell.font = { bold: true };
					}
				} else {
					worksheet.getCell(String.fromCharCode(65 + cellIndex) + (rowIndex + 1)).value = cell;
				}
			});
		});

		// Автоматически устанавливаем ширину столбцов
		worksheet.columns.forEach(column => {
			let maxLength = 0;
			column.eachCell({ includeEmpty: true }, cell => {
				maxLength = Math.max(maxLength, (cell.value || '').toString().length);
			});
			column.width = maxLength + 2;
		});

		var Title = "Предстоящие экзамены  " + selectedGroup + " " + selectedSubject + ".xlsx";
		// Скачиваем Excel файл
		const buffer = await workbook.xlsx.writeBuffer();
		saveAs(new Blob([buffer], { type: "application/octet-stream" }), Title);
	}

	$('#ChangeGradeBtn').click(function (id) {
		if ($('#ChangeGradeBtn').text() == 'Изменить') {
			$('.selectGrades').show();
			$('#ChangeGradeBtn').text('Сохранить');
		}
		else {
			$('.selectGrades').hide();
			$('#ChangeGradeBtn').text('Изменить');
			location.reload()
		}

	});

	function GradeIsChanged(id, event) {
		var grade = event.target.value;
		$.ajax({
			type: 'POST',
			url: '/Exams/ChangeGrades/',
			contentType: 'application/json',
			data: JSON.stringify({ id: id, newGrade: grade }),
			dataType: 'json',
		});
	};

	$('#ChangeDateBtn').click(function (id) {
		if ($('#ChangeDateBtn').text() == 'Изменить') {
			$('.selectDates').show();
			$('#ChangeDateBtn').text('Сохранить');
		}
		else {
			$('.selectDates').hide();
			$('#ChangeDateBtn').text('Изменить');
			location.reload()
		}

	});

	function DateIsChanged(id, event) {
		var date = event.target.value;
		$.ajax({
			type: 'POST',
			url: '/Exams/ChangeDates/',
			contentType: 'application/json',
			data: JSON.stringify({ id: id, newDate: date }),
			dataType: 'json',

		});
	};

</script>